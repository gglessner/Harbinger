# Harbinger Configuration File
# Author: Garland Glessner <gglessner@gmail.com>
# License: GNU GPL

# Email Configuration
# Option 1: SMTP Configuration (commented out)
# email:
#   smtp_server: "smtp.gmail.com"
#   smtp_port: 587
#   use_tls: true
#   username: "test@example.com"
#   password: "test-password"
#   from_address: "test@example.com"

# Option 2: Local Mail Configuration (using mail -s command)
email:
  use_local_mail: true
  mail_command: "mail"  # or "/usr/bin/mail" for full path
  from_address: "noreply@domain.com"  # Optional: sender address for mail -r flag

# Logging Configuration
logging:
  level: "INFO"  # DEBUG, INFO, WARNING, ERROR
  file: "harbinger.log"

# Report Configuration
reports:
  save_to_file: true  # Set to true to save reports to timestamped files
  directory: "reports"  # Directory to save report files (will be created if it doesn't exist)

# Standalone Mode Configuration
standalone:
  report_time: "08:00"  # Daily report time (24-hour format)

# Port Monitoring Sections
# Each port_* section defines monitoring for a specific TCP port

# Example 1: Basic port scanning with service detection
port_ssh:
  port: 22
  label: "Network Security"
  port_label: "SSH"
  email: "security@company.com"
  nmap_scan: "nmap -p {port} --open 10.0.0.0/24"
  post_command: "python post_command/port_check.py {host} {port} && nmap -sV -p {port} {host}"

# Example 2: HTTP service with TLS detection
port_web:
  port: 80
  label: "Network Security"
  port_label: "HTTP"
  email: "security@company.com"
  command: "nmap -p {port} --open 10.0.0.0/24"
  post_command: "python post_command/port_check.py {host} {port} && (python post_command/tls_check.py {host} {port} && curl -k -I https://{host} || curl -I http://{host})"

# Example 3: HTTPS with TLS verification and certificate collection
port_https:
  port: 443
  label: "Network Security"
  port_label: "HTTPS"
  email: "security@company.com"
  nmap_scan: "nmap -p {port} --open --max-retries 2 10.0.0.0/24"
  post_command: "python post_command/port_check.py {host} {port} && python post_command/tls_check.py {host} {port} && python post_command/cert_collector.py {host} {port} && curl -I https://{host}"

# Example 4: RDP with service detection
port_rdp:
  port: 3389
  label: "Admin Services"
  port_label: "RDP"
  email: "admin@company.com"
  command: "nmap -p {port} --open 10.0.0.0/24"
  post_command: "python post_command/port_check.py {host} {port} && nmap -sV -p {port} {host}"

# Example 5: Optimized Kafka security scanner with TLS detection and certificate collection
port_kafka:
  port: 9092
  label: "Data Services"
  port_label: "Kafka"
  email: "security@company.com"
  nmap_scan: "nmap -p {port} --open 10.0.0.0/24"
  post_command: "python post_command/port_check.py {host} {port} && (python post_command/tls_check.py {host} {port} && python post_command/cert_collector.py {host} {port} && python post_command/kafka.py --tls {host} {port} || python post_command/kafka.py {host} {port})"

# Example 6: Kafka TLS port with TLS-only testing and certificate collection
port_kafka_tls:
  port: 9093
  label: "Data Services"
  port_label: "Kafka TLS"
  email: "security@company.com"
  nmap_scan: "nmap -p {port} --open 10.0.0.0/24"
  post_command: "python post_command/port_check.py {host} {port} && python post_command/tls_check.py {host} {port} && python post_command/cert_collector.py {host} {port} && python post_command/kafka.py --tls {host} {port} || echo 'TLS not available'"

# Example 6.5: STOMP messaging with TLS detection and certificate collection
port_stomp:
  port: 61613
  label: "Data Services"
  port_label: "STOMP"
  email: "security@company.com"
  nmap_scan: "nmap -p {port} --open 10.0.0.0/24"
  post_command: "python post_command/port_check.py {host} {port} && (python post_command/tls_check.py {host} {port} && python post_command/cert_collector.py {host} {port} && python post_command/stomp.py --tls {host} {port} || python post_command/stomp.py {host} {port})"

# Example 6.6: RabbitMQ Management Web API with TLS detection and certificate collection
port_rabbitmq:
  port: 15672
  label: "Data Services"
  port_label: "RabbitMQ Management"
  email: "security@company.com"
  nmap_scan: "nmap -p {port} --open 10.0.0.0/24"
  post_command: "python post_command/port_check.py {host} {port} && (python post_command/tls_check.py {host} {port} && python post_command/cert_collector.py {host} {port} && python post_command/rabbitmq-web.py --tls {host} {port} || python post_command/rabbitmq-web.py {host} {port})"

# Example 6.7: Apache ActiveMQ Web Console with TLS detection and certificate collection
port_activemq:
  port: 8161
  label: "Data Services"
  port_label: "ActiveMQ Web Console"
  email: "security@company.com"
  nmap_scan: "nmap -p {port} --open 10.0.0.0/24"
  post_command: "python post_command/port_check.py {host} {port} && (python post_command/tls_check.py {host} {port} && python post_command/cert_collector.py {host} {port} && python post_command/activemq-web.py --tls {host} {port} || python post_command/activemq-web.py {host} {port})"

# Example 7: HTTP service with full response capture
port_http_full:
  port: 80
  label: "Web Services"
  port_label: "HTTP Full"
  email: "security@company.com"
  nmap_scan: "nmap -p {port} --open 10.0.0.0/24"
  post_command: "python post_command/port_check.py {host} {port} && python post_command/http_check.py {host} {port}"

# Example 7: HTTPS service with full response capture and certificate collection
port_https_full:
  port: 443
  label: "Web Services"
  port_label: "HTTPS Full"
  email: "security@company.com"
  nmap_scan: "nmap -p {port} --open 10.0.0.0/24"
  post_command: "python post_command/port_check.py {host} {port} && python post_command/tls_check.py {host} {port} && python post_command/cert_collector.py {host} {port} && python post_command/http_check.py {host} {port} https"

# Example 8: Custom web application path testing
port_webapp:
  port: 8080
  label: "Development"
  port_label: "Web App"
  email: "devops@company.com"
  nmap_scan: "nmap -p {port} --open 10.0.0.0/24"
  post_command: "python post_command/port_check.py {host} {port} && python post_command/http_check.py {host} {port} http /api/status"

# Example 9: Custom script (works on both Windows and Linux)
port_custom:
  port: 9000
  label: "Development"
  port_label: "Custom Service"
  email: "devops@company.com"
  command: "python custom_scanner.py --subnet 10.0.0.0/24 --port {port}"

# Example 10: TLS certificate collection for truststore (certificates only)
port_https_cert:
  port: 443
  label: "Certificate Collection"
  port_label: "HTTPS Cert"
  email: "security@company.com"
  nmap_scan: "nmap -p {port} --open 10.0.0.0/24"
  post_command: "python post_command/port_check.py {host} {port} && python post_command/tls_check.py {host} {port} && python post_command/cert_collector.py {host} {port}"

# Example 11: Web service using collected certificates
port_https_secure:
  port: 443
  label: "Web Services"
  port_label: "HTTPS Secure"
  email: "security@company.com"
  nmap_scan: "nmap -p {port} --open 10.0.0.0/24"
  post_command: "python post_command/port_check.py {host} {port} && python post_command/http_check.py {host} {port} --tls --url /api/status"

# Example 12: Report-only monitoring (no email sent)
port_dns:
  port: 53
  label: "Internal Monitoring"
  port_label: "DNS"
  # No email field = report-only mode
  nmap_scan: "nmap -p {port} --open 10.0.0.0/24"
  post_command: "nslookup {host}"
